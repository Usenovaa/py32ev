'''
ООП (Объектно-ориентированное программирование)
'''

# набор правил (парадигма), который основывается на 2х ключевых понятиях -> класс и объект (подход написания кода)

# Класс -> это описание того, какими свойстваи поведением будет обладать объект (чертеж)

# объект -> это экземпляр класса с собственным состоянием и поведением

# свойства -> обычные переменные (name='John', age=34,...)
# поведение -> это обычные функции внутри класса (методы)


'''
Синтаксис
'''

class Название: # -> объявление класса
    переменная = '' # свойтво (переменной класса, атрибут класса) 

    def first_method(self): # определили метод (self -> ссылка на объект ПЕРЕДОВАТЬ ОБЯЗАТЕЛЬНО!!!)
        pass


obj = Название() # создание объекта (экземпляр класса)
# print(obj) # выводит ссылка объект


class Person:
    soul = True
    body = True

    def __init__(self, name, age, last_name):

        '''
        функция, которая вызывается при создании объекта
        self - ссылка на созданный объект
        здесь создаются переменные (атрибуты) объекта (атрибуты экземпляра класса)

        отвечает за инициализацию объекта
        '''
        self.name = name  # мы добавили в объект self новый атрибут name
        self.age = age
        self.last_name = last_name

    def add_age(self):
        '''
        функция, которая принимает объект 
        и изменяет его возраст на 1
        метод экземпляра класса (метод объекта)
        '''
        self.age += 1


# person = Person('John', 23, 'Snow')

# # print(person.name)
# # print(person.age)
# person.add_age()
# print(person.age)

# print(dir(person))
# print(person.__dict__) # возвращает словарь с данными объекта

# person2 = Person('Sam', 44, 'Brown')
# # print(person2.__dict__)
# print(person2.age)
        

''' ===Атрибуты класса (переменные класса)==== '''
# переменные внутри класса -> относится ко всем объектам (константа)
# можно обращаться чере класс или объект 
# Название_класса.артибут_класса
# объект.артибут_класса


'''=== Методы класса ==='''
#  функция внутри класса, первым аргументом принимает сcылку на класс

'''=== Объект класса ==='''
# экземпляр класса, instance класса, инстанция класса созданная по шаблону класса (перенимает все атрибуты и методы у класса)

'''=== Атрибуты и методы объекта ==='''
# есть у объекта, но может не быть у класса
# атрибуты класса определяются в методе __init__ (к ним нельзя обратиться через класс)
# методы объкта - первым аргументом принимают ссылку на объект - self

class A:
    var1 = 'переменная класса'

    def __init__(self):
        self.var2 = 'переменная объекта'


# print(dir(A))
        
obj = A()
# print(dir(obj))
 
# print(A.var1)
# print(A.var2) #AttributeError

# print(obj.var1)
# print(obj.var2)

'''
класс имеет доступ только до переменных класса

объект имеет доступ как к переменным класса, так и к переменным объекта
'''

class Salary:
    nalog = 15
    
    def __init__(self, z, e):
        self.zp = z
        self.staj = e

    def sum_nalog(self):
        s = self.zp * self.staj * 12 * self.nalog / 100
        print(s)


a = Salary(17000, 10)
# a.sum_nalog()
'''высчитать сумму уплаченного налога за время работы'''
# Salary.sum_nalog(a)
